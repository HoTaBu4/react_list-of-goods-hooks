{"version":3,"sources":["App.tsx","GoodsList.tsx","index.tsx"],"names":["SortField","GoodsList","list","map","good","goodsFromServer","getPrepared","goods","sortField","isReversed","preparedGoods","LENGTH","sort","good1","good2","length","ALPHABETICALLY","localeCompare","reverse","App","useState","setSortField","SetIsReversed","visibleGoods","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0DCdQC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACxC,6BACGA,EAAKC,KAAI,SAAAC,GAAI,OACZ,oBACE,UAAQ,OADV,SAIGA,GAFIA,SDJAC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAQF,SAASC,EAAYC,EAAiBC,EAAmBC,GACvD,IAAIC,EAAa,YAAOH,GAExB,GAAIC,EACF,OAAQA,GACN,KAAKR,EAAUW,OACbD,EACGE,MAAK,SAACC,EAAeC,GAAhB,OAAkCA,EAAMC,OAASF,EAAME,UAC/D,MACF,KAAKf,EAAUgB,eACbN,EACGE,MAAK,SAACC,EAAeC,GAAhB,OAAkCD,EAAMI,cAAcH,MAWpE,OAJIL,IACFC,EAAgBA,EAAcQ,WAGzBR,G,SA3BJV,K,gBAAAA,E,2BAAAA,M,KA8BE,IAAMmB,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBa,EAAlB,KACA,EAAoCD,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBa,EAAnB,KAEMC,EAAejB,EAAYD,EAAiBG,EAAWC,GAE7D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBhB,IAAcR,EAAUgB,eAAiB,GAAK,YAC3EU,QAAS,WACPL,EAAarB,EAAUgB,iBAJ3B,iCAUA,wBACES,KAAK,SACLD,UAAS,4BAAuBhB,IAAcR,EAAUW,OAAS,GAAK,YACtEe,QAAS,WACPL,EAAarB,EAAUW,SAJ3B,4BAUA,wBACEc,KAAK,SACLD,UAAS,4BAAuBf,EAAa,GAAK,YAClDiB,QAAS,WACPJ,GAAeb,GACfH,EAAYD,EAAiBG,EAAWC,IAL5C,sBAWED,GAAaC,IACb,wBACEgB,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPL,EAAa,IACbC,GAAc,IALlB,sBAYJ,cAAC,EAAD,CAAWpB,KAAMqB,QElGvBI,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0c783cf2.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport React, { useState } from 'react';\nimport { GoodsList } from './GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  LENGTH = 'length',\n  ALPHABETICALLY = 'alphabet',\n}\n\nfunction getPrepared(goods: string[], sortField: string, isReversed: boolean) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortField.LENGTH:\n        preparedGoods\n          .sort((good1: string, good2: string) => good2.length - good1.length);\n        break;\n      case SortField.ALPHABETICALLY:\n        preparedGoods\n          .sort((good1: string, good2: string) => good1.localeCompare(good2));\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, SetIsReversed] = useState(false);\n\n  const visibleGoods = getPrepared(goodsFromServer, sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortField === SortField.ALPHABETICALLY ? '' : 'is-light'}`}\n          onClick={() => {\n            setSortField(SortField.ALPHABETICALLY);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortField === SortField.LENGTH ? '' : 'is-light'}`}\n          onClick={() => {\n            setSortField(SortField.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n          onClick={() => {\n            SetIsReversed(!isReversed);\n            getPrepared(goodsFromServer, sortField, isReversed);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              SetIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <GoodsList list={visibleGoods} />\n    </div>\n  );\n};\n","type Props = {\n  list: string[];\n};\n\nexport const GoodsList: React.FC<Props> = ({ list }) => (\n  <ul>\n    {list.map(good => (\n      <li\n        data-cy=\"Good\"\n        key={good}\n      >\n        {good}\n      </li>\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}